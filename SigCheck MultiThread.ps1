$SigcheckPath = "C:\Tools\sigcheck.exe"
$OutputPath = "C:\Fun.csv"
$MaxThreads = 65

if (-not (Test-Path -Path $SigcheckPath)) {
    $webClient = New-Object System.Net.WebClient
    $webClient.DownloadFile("https://live.sysinternals.com/sigcheck.exe", $SigcheckPath)
}

$files = Get-ChildItem -Path 'C:\Windows\System32\' -Recurse -File -ErrorAction SilentlyContinue -Filter *.* |
    Where-Object { $_.Extension -notin @('.gif', '.jpg', '.png', '.txt', '.appicon', '.appinfo', '.dat') -and $_.Length -le 1048576 } |
    Select-Object FullName

if (-not $OutputPath) {
    Write-Error "OutputPath not set. Please specify a valid file path."
    return
}

$headerRow = 'Path,Verified,Date,Publisher,Company,Description,Product,Product Version,File Version,Machine Type,Binary Version,Original Name,Internal Name,Copyright,Comments,Entropy,MD5,SHA1,PESHA1,PESHA256,SHA256,IMP,VT detection,VT link'
$headerRow | Out-File -FilePath $OutputPath -Encoding utf8

$totalFileCount = $files.Count
$filesProcessed = 0

$runningJobs = @()

$lockObject = [System.Threading.Mutex]::new()

foreach ($file in $files) {
    $filesProcessed++
    $percentComplete = [Math]::Round($filesProcessed / $totalFileCount * 100)

    Write-Progress -Activity "Scanning for files..." -Status "$filesProcessed of $totalFileCount files found ($percentComplete%)" -PercentComplete $percentComplete

    $runningJobs += Start-ThreadJob -ScriptBlock {
        param ($file, $SigcheckPath, $OutputPath, $headerRow, $lockObject)

        $sigcheckOutput = & $SigcheckPath -nobanner -a -v -h -vt -c $file

        $output = $sigcheckOutput -split "`r`n" | Select-Object -Skip 1

        $lockObject.WaitOne()
        $output | Out-File -FilePath $OutputPath -Append -Encoding utf8
        $lockObject.ReleaseMutex()

    } -ArgumentList $file.FullName, $SigcheckPath, $OutputPath, $headerRow, $lockObject

    while ($runningJobs.Count -ge $MaxThreads -and $runningJobs.Count -gt 20) {
        $completedJobs = $runningJobs | Where-Object { $_.State -eq 'Completed' }
        $runningJobs = $runningJobs | Where-Object { $_.State -ne 'Completed' }

        $completedJobs | ForEach-Object {
            $output = Receive-Job $_
            Remove-Job $_
        }
    }
}

$runningJobs | Wait-Job | Receive-Job | Out-Null

Write-Host "Sigcheck complete. Results saved to $OutputPath."
